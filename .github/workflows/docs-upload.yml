name: Upload Documentation Updates

on:
  push:
    branches:
      - main
    paths:
      - 'docs/**/*.mdx'
      - 'docs/**/*.md'
      - 'README.md'
      - 'CONTRIBUTING.md'
  workflow_dispatch:  # Allow manual trigger

env:
  API_ENDPOINT: 'https://api.openmind.org/api/core/upload'
  INTERNAL_BEARER_TOKEN: ${{ secrets.INTERNAL_BEARER_TOKEN }}

jobs:
  upload-docs:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 2  # Need previous commit to detect changes

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v46
        with:
          files: |
            docs/**/*.mdx
            docs/**/*.md
            README.md
            CONTRIBUTING.md
          separator: ','

      - name: Set up Python
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          pip install requests

      - name: Upload changed documentation files
        if: steps.changed-files.outputs.any_changed == 'true'
        env:
          CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          python3 -c "
          import os
          import requests
          import sys
          import re
          from pathlib import Path

          def parse_mdx_to_text(content):
              text = content.decode('utf-8', errors='ignore')

              # Remove imports/exports
              text = re.sub(r'^(import|export)\s+.*?$', '', text, flags=re.MULTILINE)

              # Remove JSX tags
              text = re.sub(r'<[^>]+>', '', text)

              # Extract code blocks
              def format_code(match):
                  lang = match.group(1) or 'text'
                  code = match.group(2).strip()
                  if lang in ['bash', 'shell', 'sh']:
                      return f'\n[Command: {lang}]\n{code}\n'
                  else:
                      return f'\n[Code: {lang}]\n{code}\n'

              text = re.sub(r'\`\`\`([a-zA-Z]*)?\n(.*?)\`\`\`', format_code, text, flags=re.DOTALL)
              text = re.sub(r'\`([^\`]+)\`', r'[inline: \1]', text)

              # Clean markdown
              text = re.sub(r'^#+\s+(.+)$', r'\1', text, flags=re.MULTILINE)
              text = re.sub(r'\*\*(.+?)\*\*', r'\1', text)
              text = re.sub(r'\[([^\]]+)\]\([^)]+\)', r'\1', text)

              return text.strip()

          upload_url = os.environ.get('API_ENDPOINT')
          auth_token = os.environ.get('INTERNAL_BEARER_TOKEN')
          changed_files = os.environ.get('CHANGED_FILES', '').split(',')

          if not auth_token:
              print('Error: INTERNAL_BEARER_TOKEN not set')
              sys.exit(1)

          headers = {'Authorization': f'Bearer {auth_token}'}

          for file_path in changed_files:
              file_path = file_path.strip()
              if not file_path or not os.path.exists(file_path):
                  continue

              print(f'Uploading: {file_path}')

              with open(file_path, 'rb') as f:
                  content = f.read()

              if file_path.endswith(('.mdx', '.md')):
                  content = parse_mdx_to_text(content).encode('utf-8')

              filename = Path(file_path).stem + '.txt'
              files = {'file': (filename, content, 'text/plain')}

              try:
                  resp = requests.post(upload_url, headers=headers, files=files, timeout=30)
                  if resp.status_code == 200:
                      print('  ✓ Success')
                  else:
                      print(f'  ✗ Failed: {resp.status_code}')
                      sys.exit(1)
              except Exception as e:
                  print(f'  ✗ Error: {e}')
                  sys.exit(1)
          "
